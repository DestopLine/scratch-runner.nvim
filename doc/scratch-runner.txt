*scratch-runner.txt*
*scratch-runner.nvim*
*scratch-runner*

==============================================================================
Contents                                             *scratch-runner-contents*

    1. Configuration                                   |scratch-runner-config|
    2. Types                                            |scratch-runner-types|

==============================================================================
1. Configuration                                       *scratch-runner-config*

You can configure the plugin's behavior by passing a table with options to
|scratch-runner.setup()|. Calling this method is not needed for the plugin to
work.

Example: ~
>lua
    require("scratch-runner").setup({
        run_key = "<C-t>",
        output_switch_key = "<CR>",
    })
<

Default configuration                          *scratch-runner-default-config*
>lua
    {
        ---Key that runs the scratch buffer.
        ---@type string?
        run_key = "<CR>",

        ---Key that switches between stdout and stderr.
        ---@type string?
        output_switch_key = "<Tab>",

        ---Commands that run your script. See :h scratch-runner.SourceSpec
        ---@type table<string, scratch-runner.SourceSpec>
        sources = {},
    }
<


==============================================================================
2. Types                                                *scratch-runner-types*

SourceSpec                                         *scratch-runner.SourceSpec*
    The command that will run your script.

    This can be one of the following:
      • (`string[]`) A list of strings with the command. The path to the
        scratch file will be appended to the command.

        Example: ~
        >lua
            { "node" }
<

      • (`fun(filepath: string): string[]`) A function that receives the path
        to the scratch file and returns the command to run.

        Example: ~
        >lua
            function(filepath)
                local on_windows = vim.uv.os_uname().sysname == "Windows_NT"
                return {
                    on_windows and "py" or "python3",
                    filepath,
                    "-",
                    vim.version().build, -- Pass Neovim version as an argument
                }
            end
<
    

vim:tw=78:ts=8:et:ft=help:norl:
